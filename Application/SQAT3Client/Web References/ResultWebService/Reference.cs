//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Molmed.SQAT.ResultWebService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ResultWebServiceSoap", Namespace="Molmed.Chiasma")]
    public partial class ResultWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetMethodsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResultPlateNameChangedOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogGenotypeExportOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogSqatEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback OneTimeExportSqatLogsToFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback OneTimeExportExistingToLogFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataSetsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSubsetsOperationCompleted;
        
        private System.Threading.SendOrPostCallback HasSubsetsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataSetInfoNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSubsetInfoNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsValidDataSetInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsValidSubsetInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInternalDataSetNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsBulkMethodOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadDataGetTicketOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadDataGetSamplesOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadDataGetAssaysOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadDataExtractSetsOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadDataGetTotalSizeOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadDataGetSetSizeOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadDataGetChunkOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadDataCleanUpOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ResultWebService() {
            this.Url = global::Molmed.SQAT.Properties.Settings.Default.SNP_Quality_Analysis_Tool_ResultWebService_ResultWebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetMethodsCompletedEventHandler GetMethodsCompleted;
        
        /// <remarks/>
        public event ResultPlateNameChangedCompletedEventHandler ResultPlateNameChangedCompleted;
        
        /// <remarks/>
        public event LogGenotypeExportCompletedEventHandler LogGenotypeExportCompleted;
        
        /// <remarks/>
        public event LogSqatEventCompletedEventHandler LogSqatEventCompleted;
        
        /// <remarks/>
        public event OneTimeExportSqatLogsToFilesCompletedEventHandler OneTimeExportSqatLogsToFilesCompleted;
        
        /// <remarks/>
        public event OneTimeExportExistingToLogFilesCompletedEventHandler OneTimeExportExistingToLogFilesCompleted;
        
        /// <remarks/>
        public event GetDataSetsCompletedEventHandler GetDataSetsCompleted;
        
        /// <remarks/>
        public event GetSubsetsCompletedEventHandler GetSubsetsCompleted;
        
        /// <remarks/>
        public event HasSubsetsCompletedEventHandler HasSubsetsCompleted;
        
        /// <remarks/>
        public event GetDataSetInfoNameCompletedEventHandler GetDataSetInfoNameCompleted;
        
        /// <remarks/>
        public event GetSubsetInfoNameCompletedEventHandler GetSubsetInfoNameCompleted;
        
        /// <remarks/>
        public event IsValidDataSetInfoCompletedEventHandler IsValidDataSetInfoCompleted;
        
        /// <remarks/>
        public event IsValidSubsetInfoCompletedEventHandler IsValidSubsetInfoCompleted;
        
        /// <remarks/>
        public event GetInternalDataSetNamesCompletedEventHandler GetInternalDataSetNamesCompleted;
        
        /// <remarks/>
        public event IsBulkMethodCompletedEventHandler IsBulkMethodCompleted;
        
        /// <remarks/>
        public event LoadDataGetTicketCompletedEventHandler LoadDataGetTicketCompleted;
        
        /// <remarks/>
        public event LoadDataGetSamplesCompletedEventHandler LoadDataGetSamplesCompleted;
        
        /// <remarks/>
        public event LoadDataGetAssaysCompletedEventHandler LoadDataGetAssaysCompleted;
        
        /// <remarks/>
        public event LoadDataExtractSetsCompletedEventHandler LoadDataExtractSetsCompleted;
        
        /// <remarks/>
        public event LoadDataGetTotalSizeCompletedEventHandler LoadDataGetTotalSizeCompleted;
        
        /// <remarks/>
        public event LoadDataGetSetSizeCompletedEventHandler LoadDataGetSetSizeCompleted;
        
        /// <remarks/>
        public event LoadDataGetChunkCompletedEventHandler LoadDataGetChunkCompleted;
        
        /// <remarks/>
        public event LoadDataCleanUpCompletedEventHandler LoadDataCleanUpCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Molmed.Chiasma/GetMethods", RequestNamespace="Molmed.Chiasma", ResponseNamespace="Molmed.Chiasma", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetMethods() {
            object[] results = this.Invoke("GetMethods", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMethodsAsync() {
            this.GetMethodsAsync(null);
        }
        
        /// <remarks/>
        public void GetMethodsAsync(object userState) {
            if ((this.GetMethodsOperationCompleted == null)) {
                this.GetMethodsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMethodsOperationCompleted);
            }
            this.InvokeAsync("GetMethods", new object[0], this.GetMethodsOperationCompleted, userState);
        }
        
        private void OnGetMethodsOperationCompleted(object arg) {
            if ((this.GetMethodsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMethodsCompleted(this, new GetMethodsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Molmed.Chiasma/ResultPlateNameChanged", RequestNamespace="Molmed.Chiasma", ResponseNamespace="Molmed.Chiasma", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ResultPlateNameChanged(string oldName, string newName) {
            this.Invoke("ResultPlateNameChanged", new object[] {
                        oldName,
                        newName});
        }
        
        /// <remarks/>
        public void ResultPlateNameChangedAsync(string oldName, string newName) {
            this.ResultPlateNameChangedAsync(oldName, newName, null);
        }
        
        /// <remarks/>
        public void ResultPlateNameChangedAsync(string oldName, string newName, object userState) {
            if ((this.ResultPlateNameChangedOperationCompleted == null)) {
                this.ResultPlateNameChangedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResultPlateNameChangedOperationCompleted);
            }
            this.InvokeAsync("ResultPlateNameChanged", new object[] {
                        oldName,
                        newName}, this.ResultPlateNameChangedOperationCompleted, userState);
        }
        
        private void OnResultPlateNameChangedOperationCompleted(object arg) {
            if ((this.ResultPlateNameChangedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResultPlateNameChangedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Molmed.Chiasma/LogGenotypeExport", RequestNamespace="Molmed.Chiasma", ResponseNamespace="Molmed.Chiasma", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void LogGenotypeExport(int internalReportId, string path, string nameOfUser, System.DateTime date, string database) {
            this.Invoke("LogGenotypeExport", new object[] {
                        internalReportId,
                        path,
                        nameOfUser,
                        date,
                        database});
        }
        
        /// <remarks/>
        public void LogGenotypeExportAsync(int internalReportId, string path, string nameOfUser, System.DateTime date, string database) {
            this.LogGenotypeExportAsync(internalReportId, path, nameOfUser, date, database, null);
        }
        
        /// <remarks/>
        public void LogGenotypeExportAsync(int internalReportId, string path, string nameOfUser, System.DateTime date, string database, object userState) {
            if ((this.LogGenotypeExportOperationCompleted == null)) {
                this.LogGenotypeExportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogGenotypeExportOperationCompleted);
            }
            this.InvokeAsync("LogGenotypeExport", new object[] {
                        internalReportId,
                        path,
                        nameOfUser,
                        date,
                        database}, this.LogGenotypeExportOperationCompleted, userState);
        }
        
        private void OnLogGenotypeExportOperationCompleted(object arg) {
            if ((this.LogGenotypeExportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogGenotypeExportCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Molmed.Chiasma/LogSqatEvent", RequestNamespace="Molmed.Chiasma", ResponseNamespace="Molmed.Chiasma", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void LogSqatEvent(string resultPlateName, string changedAction, string nameOfUser, System.DateTime date) {
            this.Invoke("LogSqatEvent", new object[] {
                        resultPlateName,
                        changedAction,
                        nameOfUser,
                        date});
        }
        
        /// <remarks/>
        public void LogSqatEventAsync(string resultPlateName, string changedAction, string nameOfUser, System.DateTime date) {
            this.LogSqatEventAsync(resultPlateName, changedAction, nameOfUser, date, null);
        }
        
        /// <remarks/>
        public void LogSqatEventAsync(string resultPlateName, string changedAction, string nameOfUser, System.DateTime date, object userState) {
            if ((this.LogSqatEventOperationCompleted == null)) {
                this.LogSqatEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogSqatEventOperationCompleted);
            }
            this.InvokeAsync("LogSqatEvent", new object[] {
                        resultPlateName,
                        changedAction,
                        nameOfUser,
                        date}, this.LogSqatEventOperationCompleted, userState);
        }
        
        private void OnLogSqatEventOperationCompleted(object arg) {
            if ((this.LogSqatEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogSqatEventCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Molmed.Chiasma/OneTimeExportSqatLogsToFiles", RequestNamespace="Molmed.Chiasma", ResponseNamespace="Molmed.Chiasma", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void OneTimeExportSqatLogsToFiles() {
            this.Invoke("OneTimeExportSqatLogsToFiles", new object[0]);
        }
        
        /// <remarks/>
        public void OneTimeExportSqatLogsToFilesAsync() {
            this.OneTimeExportSqatLogsToFilesAsync(null);
        }
        
        /// <remarks/>
        public void OneTimeExportSqatLogsToFilesAsync(object userState) {
            if ((this.OneTimeExportSqatLogsToFilesOperationCompleted == null)) {
                this.OneTimeExportSqatLogsToFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOneTimeExportSqatLogsToFilesOperationCompleted);
            }
            this.InvokeAsync("OneTimeExportSqatLogsToFiles", new object[0], this.OneTimeExportSqatLogsToFilesOperationCompleted, userState);
        }
        
        private void OnOneTimeExportSqatLogsToFilesOperationCompleted(object arg) {
            if ((this.OneTimeExportSqatLogsToFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OneTimeExportSqatLogsToFilesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Molmed.Chiasma/OneTimeExportExistingToLogFiles", RequestNamespace="Molmed.Chiasma", ResponseNamespace="Molmed.Chiasma", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void OneTimeExportExistingToLogFiles() {
            this.Invoke("OneTimeExportExistingToLogFiles", new object[0]);
        }
        
        /// <remarks/>
        public void OneTimeExportExistingToLogFilesAsync() {
            this.OneTimeExportExistingToLogFilesAsync(null);
        }
        
        /// <remarks/>
        public void OneTimeExportExistingToLogFilesAsync(object userState) {
            if ((this.OneTimeExportExistingToLogFilesOperationCompleted == null)) {
                this.OneTimeExportExistingToLogFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOneTimeExportExistingToLogFilesOperationCompleted);
            }
            this.InvokeAsync("OneTimeExportExistingToLogFiles", new object[0], this.OneTimeExportExistingToLogFilesOperationCompleted, userState);
        }
        
        private void OnOneTimeExportExistingToLogFilesOperationCompleted(object arg) {
            if ((this.OneTimeExportExistingToLogFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OneTimeExportExistingToLogFilesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Molmed.Chiasma/GetDataSets", RequestNamespace="Molmed.Chiasma", ResponseNamespace="Molmed.Chiasma", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDataSets(string method) {
            object[] results = this.Invoke("GetDataSets", new object[] {
                        method});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataSetsAsync(string method) {
            this.GetDataSetsAsync(method, null);
        }
        
        /// <remarks/>
        public void GetDataSetsAsync(string method, object userState) {
            if ((this.GetDataSetsOperationCompleted == null)) {
                this.GetDataSetsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataSetsOperationCompleted);
            }
            this.InvokeAsync("GetDataSets", new object[] {
                        method}, this.GetDataSetsOperationCompleted, userState);
        }
        
        private void OnGetDataSetsOperationCompleted(object arg) {
            if ((this.GetDataSetsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataSetsCompleted(this, new GetDataSetsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Molmed.Chiasma/GetSubsets", RequestNamespace="Molmed.Chiasma", ResponseNamespace="Molmed.Chiasma", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSubsets(string method, string[] dataSets) {
            object[] results = this.Invoke("GetSubsets", new object[] {
                        method,
                        dataSets});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSubsetsAsync(string method, string[] dataSets) {
            this.GetSubsetsAsync(method, dataSets, null);
        }
        
        /// <remarks/>
        public void GetSubsetsAsync(string method, string[] dataSets, object userState) {
            if ((this.GetSubsetsOperationCompleted == null)) {
                this.GetSubsetsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubsetsOperationCompleted);
            }
            this.InvokeAsync("GetSubsets", new object[] {
                        method,
                        dataSets}, this.GetSubsetsOperationCompleted, userState);
        }
        
        private void OnGetSubsetsOperationCompleted(object arg) {
            if ((this.GetSubsetsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubsetsCompleted(this, new GetSubsetsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Molmed.Chiasma/HasSubsets", RequestNamespace="Molmed.Chiasma", ResponseNamespace="Molmed.Chiasma", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool HasSubsets(string method) {
            object[] results = this.Invoke("HasSubsets", new object[] {
                        method});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void HasSubsetsAsync(string method) {
            this.HasSubsetsAsync(method, null);
        }
        
        /// <remarks/>
        public void HasSubsetsAsync(string method, object userState) {
            if ((this.HasSubsetsOperationCompleted == null)) {
                this.HasSubsetsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHasSubsetsOperationCompleted);
            }
            this.InvokeAsync("HasSubsets", new object[] {
                        method}, this.HasSubsetsOperationCompleted, userState);
        }
        
        private void OnHasSubsetsOperationCompleted(object arg) {
            if ((this.HasSubsetsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HasSubsetsCompleted(this, new HasSubsetsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Molmed.Chiasma/GetDataSetInfoName", RequestNamespace="Molmed.Chiasma", ResponseNamespace="Molmed.Chiasma", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDataSetInfoName(string method) {
            object[] results = this.Invoke("GetDataSetInfoName", new object[] {
                        method});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataSetInfoNameAsync(string method) {
            this.GetDataSetInfoNameAsync(method, null);
        }
        
        /// <remarks/>
        public void GetDataSetInfoNameAsync(string method, object userState) {
            if ((this.GetDataSetInfoNameOperationCompleted == null)) {
                this.GetDataSetInfoNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataSetInfoNameOperationCompleted);
            }
            this.InvokeAsync("GetDataSetInfoName", new object[] {
                        method}, this.GetDataSetInfoNameOperationCompleted, userState);
        }
        
        private void OnGetDataSetInfoNameOperationCompleted(object arg) {
            if ((this.GetDataSetInfoNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataSetInfoNameCompleted(this, new GetDataSetInfoNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Molmed.Chiasma/GetSubsetInfoName", RequestNamespace="Molmed.Chiasma", ResponseNamespace="Molmed.Chiasma", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSubsetInfoName(string method) {
            object[] results = this.Invoke("GetSubsetInfoName", new object[] {
                        method});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSubsetInfoNameAsync(string method) {
            this.GetSubsetInfoNameAsync(method, null);
        }
        
        /// <remarks/>
        public void GetSubsetInfoNameAsync(string method, object userState) {
            if ((this.GetSubsetInfoNameOperationCompleted == null)) {
                this.GetSubsetInfoNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubsetInfoNameOperationCompleted);
            }
            this.InvokeAsync("GetSubsetInfoName", new object[] {
                        method}, this.GetSubsetInfoNameOperationCompleted, userState);
        }
        
        private void OnGetSubsetInfoNameOperationCompleted(object arg) {
            if ((this.GetSubsetInfoNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubsetInfoNameCompleted(this, new GetSubsetInfoNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Molmed.Chiasma/IsValidDataSetInfo", RequestNamespace="Molmed.Chiasma", ResponseNamespace="Molmed.Chiasma", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsValidDataSetInfo(string method, string info) {
            object[] results = this.Invoke("IsValidDataSetInfo", new object[] {
                        method,
                        info});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsValidDataSetInfoAsync(string method, string info) {
            this.IsValidDataSetInfoAsync(method, info, null);
        }
        
        /// <remarks/>
        public void IsValidDataSetInfoAsync(string method, string info, object userState) {
            if ((this.IsValidDataSetInfoOperationCompleted == null)) {
                this.IsValidDataSetInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsValidDataSetInfoOperationCompleted);
            }
            this.InvokeAsync("IsValidDataSetInfo", new object[] {
                        method,
                        info}, this.IsValidDataSetInfoOperationCompleted, userState);
        }
        
        private void OnIsValidDataSetInfoOperationCompleted(object arg) {
            if ((this.IsValidDataSetInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsValidDataSetInfoCompleted(this, new IsValidDataSetInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Molmed.Chiasma/IsValidSubsetInfo", RequestNamespace="Molmed.Chiasma", ResponseNamespace="Molmed.Chiasma", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsValidSubsetInfo(string method, string info) {
            object[] results = this.Invoke("IsValidSubsetInfo", new object[] {
                        method,
                        info});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsValidSubsetInfoAsync(string method, string info) {
            this.IsValidSubsetInfoAsync(method, info, null);
        }
        
        /// <remarks/>
        public void IsValidSubsetInfoAsync(string method, string info, object userState) {
            if ((this.IsValidSubsetInfoOperationCompleted == null)) {
                this.IsValidSubsetInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsValidSubsetInfoOperationCompleted);
            }
            this.InvokeAsync("IsValidSubsetInfo", new object[] {
                        method,
                        info}, this.IsValidSubsetInfoOperationCompleted, userState);
        }
        
        private void OnIsValidSubsetInfoOperationCompleted(object arg) {
            if ((this.IsValidSubsetInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsValidSubsetInfoCompleted(this, new IsValidSubsetInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Molmed.Chiasma/GetInternalDataSetNames", RequestNamespace="Molmed.Chiasma", ResponseNamespace="Molmed.Chiasma", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetInternalDataSetNames(string method, string project, string dataSetName, string[] subsetNames, string dataSetInfo, string[] subsetInfo) {
            object[] results = this.Invoke("GetInternalDataSetNames", new object[] {
                        method,
                        project,
                        dataSetName,
                        subsetNames,
                        dataSetInfo,
                        subsetInfo});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetInternalDataSetNamesAsync(string method, string project, string dataSetName, string[] subsetNames, string dataSetInfo, string[] subsetInfo) {
            this.GetInternalDataSetNamesAsync(method, project, dataSetName, subsetNames, dataSetInfo, subsetInfo, null);
        }
        
        /// <remarks/>
        public void GetInternalDataSetNamesAsync(string method, string project, string dataSetName, string[] subsetNames, string dataSetInfo, string[] subsetInfo, object userState) {
            if ((this.GetInternalDataSetNamesOperationCompleted == null)) {
                this.GetInternalDataSetNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInternalDataSetNamesOperationCompleted);
            }
            this.InvokeAsync("GetInternalDataSetNames", new object[] {
                        method,
                        project,
                        dataSetName,
                        subsetNames,
                        dataSetInfo,
                        subsetInfo}, this.GetInternalDataSetNamesOperationCompleted, userState);
        }
        
        private void OnGetInternalDataSetNamesOperationCompleted(object arg) {
            if ((this.GetInternalDataSetNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInternalDataSetNamesCompleted(this, new GetInternalDataSetNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Molmed.Chiasma/IsBulkMethod", RequestNamespace="Molmed.Chiasma", ResponseNamespace="Molmed.Chiasma", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsBulkMethod(string method) {
            object[] results = this.Invoke("IsBulkMethod", new object[] {
                        method});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsBulkMethodAsync(string method) {
            this.IsBulkMethodAsync(method, null);
        }
        
        /// <remarks/>
        public void IsBulkMethodAsync(string method, object userState) {
            if ((this.IsBulkMethodOperationCompleted == null)) {
                this.IsBulkMethodOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsBulkMethodOperationCompleted);
            }
            this.InvokeAsync("IsBulkMethod", new object[] {
                        method}, this.IsBulkMethodOperationCompleted, userState);
        }
        
        private void OnIsBulkMethodOperationCompleted(object arg) {
            if ((this.IsBulkMethodCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsBulkMethodCompleted(this, new IsBulkMethodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Molmed.Chiasma/LoadDataGetTicket", RequestNamespace="Molmed.Chiasma", ResponseNamespace="Molmed.Chiasma", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LoadDataGetTicket() {
            object[] results = this.Invoke("LoadDataGetTicket", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LoadDataGetTicketAsync() {
            this.LoadDataGetTicketAsync(null);
        }
        
        /// <remarks/>
        public void LoadDataGetTicketAsync(object userState) {
            if ((this.LoadDataGetTicketOperationCompleted == null)) {
                this.LoadDataGetTicketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadDataGetTicketOperationCompleted);
            }
            this.InvokeAsync("LoadDataGetTicket", new object[0], this.LoadDataGetTicketOperationCompleted, userState);
        }
        
        private void OnLoadDataGetTicketOperationCompleted(object arg) {
            if ((this.LoadDataGetTicketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadDataGetTicketCompleted(this, new LoadDataGetTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Molmed.Chiasma/LoadDataGetSamples", RequestNamespace="Molmed.Chiasma", ResponseNamespace="Molmed.Chiasma", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] LoadDataGetSamples(string ticket) {
            object[] results = this.Invoke("LoadDataGetSamples", new object[] {
                        ticket});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void LoadDataGetSamplesAsync(string ticket) {
            this.LoadDataGetSamplesAsync(ticket, null);
        }
        
        /// <remarks/>
        public void LoadDataGetSamplesAsync(string ticket, object userState) {
            if ((this.LoadDataGetSamplesOperationCompleted == null)) {
                this.LoadDataGetSamplesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadDataGetSamplesOperationCompleted);
            }
            this.InvokeAsync("LoadDataGetSamples", new object[] {
                        ticket}, this.LoadDataGetSamplesOperationCompleted, userState);
        }
        
        private void OnLoadDataGetSamplesOperationCompleted(object arg) {
            if ((this.LoadDataGetSamplesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadDataGetSamplesCompleted(this, new LoadDataGetSamplesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Molmed.Chiasma/LoadDataGetAssays", RequestNamespace="Molmed.Chiasma", ResponseNamespace="Molmed.Chiasma", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] LoadDataGetAssays(string ticket) {
            object[] results = this.Invoke("LoadDataGetAssays", new object[] {
                        ticket});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void LoadDataGetAssaysAsync(string ticket) {
            this.LoadDataGetAssaysAsync(ticket, null);
        }
        
        /// <remarks/>
        public void LoadDataGetAssaysAsync(string ticket, object userState) {
            if ((this.LoadDataGetAssaysOperationCompleted == null)) {
                this.LoadDataGetAssaysOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadDataGetAssaysOperationCompleted);
            }
            this.InvokeAsync("LoadDataGetAssays", new object[] {
                        ticket}, this.LoadDataGetAssaysOperationCompleted, userState);
        }
        
        private void OnLoadDataGetAssaysOperationCompleted(object arg) {
            if ((this.LoadDataGetAssaysCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadDataGetAssaysCompleted(this, new LoadDataGetAssaysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Molmed.Chiasma/LoadDataExtractSets", RequestNamespace="Molmed.Chiasma", ResponseNamespace="Molmed.Chiasma", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LoadDataExtractSets(string ticket, string method, string project, string[] dataSetNames, [System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfString")] [System.Xml.Serialization.XmlArrayItemAttribute(NestingLevel=1)] string[][] subsetNames, string[] dataSetInfo, [System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfString")] [System.Xml.Serialization.XmlArrayItemAttribute(NestingLevel=1)] string[][] subsetInfo) {
            object[] results = this.Invoke("LoadDataExtractSets", new object[] {
                        ticket,
                        method,
                        project,
                        dataSetNames,
                        subsetNames,
                        dataSetInfo,
                        subsetInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LoadDataExtractSetsAsync(string ticket, string method, string project, string[] dataSetNames, string[][] subsetNames, string[] dataSetInfo, string[][] subsetInfo) {
            this.LoadDataExtractSetsAsync(ticket, method, project, dataSetNames, subsetNames, dataSetInfo, subsetInfo, null);
        }
        
        /// <remarks/>
        public void LoadDataExtractSetsAsync(string ticket, string method, string project, string[] dataSetNames, string[][] subsetNames, string[] dataSetInfo, string[][] subsetInfo, object userState) {
            if ((this.LoadDataExtractSetsOperationCompleted == null)) {
                this.LoadDataExtractSetsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadDataExtractSetsOperationCompleted);
            }
            this.InvokeAsync("LoadDataExtractSets", new object[] {
                        ticket,
                        method,
                        project,
                        dataSetNames,
                        subsetNames,
                        dataSetInfo,
                        subsetInfo}, this.LoadDataExtractSetsOperationCompleted, userState);
        }
        
        private void OnLoadDataExtractSetsOperationCompleted(object arg) {
            if ((this.LoadDataExtractSetsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadDataExtractSetsCompleted(this, new LoadDataExtractSetsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Molmed.Chiasma/LoadDataGetTotalSize", RequestNamespace="Molmed.Chiasma", ResponseNamespace="Molmed.Chiasma", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int LoadDataGetTotalSize(string ticket) {
            object[] results = this.Invoke("LoadDataGetTotalSize", new object[] {
                        ticket});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void LoadDataGetTotalSizeAsync(string ticket) {
            this.LoadDataGetTotalSizeAsync(ticket, null);
        }
        
        /// <remarks/>
        public void LoadDataGetTotalSizeAsync(string ticket, object userState) {
            if ((this.LoadDataGetTotalSizeOperationCompleted == null)) {
                this.LoadDataGetTotalSizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadDataGetTotalSizeOperationCompleted);
            }
            this.InvokeAsync("LoadDataGetTotalSize", new object[] {
                        ticket}, this.LoadDataGetTotalSizeOperationCompleted, userState);
        }
        
        private void OnLoadDataGetTotalSizeOperationCompleted(object arg) {
            if ((this.LoadDataGetTotalSizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadDataGetTotalSizeCompleted(this, new LoadDataGetTotalSizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Molmed.Chiasma/LoadDataGetSetSize", RequestNamespace="Molmed.Chiasma", ResponseNamespace="Molmed.Chiasma", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int LoadDataGetSetSize(string ticket, int dataSetId) {
            object[] results = this.Invoke("LoadDataGetSetSize", new object[] {
                        ticket,
                        dataSetId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void LoadDataGetSetSizeAsync(string ticket, int dataSetId) {
            this.LoadDataGetSetSizeAsync(ticket, dataSetId, null);
        }
        
        /// <remarks/>
        public void LoadDataGetSetSizeAsync(string ticket, int dataSetId, object userState) {
            if ((this.LoadDataGetSetSizeOperationCompleted == null)) {
                this.LoadDataGetSetSizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadDataGetSetSizeOperationCompleted);
            }
            this.InvokeAsync("LoadDataGetSetSize", new object[] {
                        ticket,
                        dataSetId}, this.LoadDataGetSetSizeOperationCompleted, userState);
        }
        
        private void OnLoadDataGetSetSizeOperationCompleted(object arg) {
            if ((this.LoadDataGetSetSizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadDataGetSetSizeCompleted(this, new LoadDataGetSetSizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Molmed.Chiasma/LoadDataGetChunk", RequestNamespace="Molmed.Chiasma", ResponseNamespace="Molmed.Chiasma", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LoadDataGetChunk(string ticket, int dataSetId, int start, int chunkSize) {
            object[] results = this.Invoke("LoadDataGetChunk", new object[] {
                        ticket,
                        dataSetId,
                        start,
                        chunkSize});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LoadDataGetChunkAsync(string ticket, int dataSetId, int start, int chunkSize) {
            this.LoadDataGetChunkAsync(ticket, dataSetId, start, chunkSize, null);
        }
        
        /// <remarks/>
        public void LoadDataGetChunkAsync(string ticket, int dataSetId, int start, int chunkSize, object userState) {
            if ((this.LoadDataGetChunkOperationCompleted == null)) {
                this.LoadDataGetChunkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadDataGetChunkOperationCompleted);
            }
            this.InvokeAsync("LoadDataGetChunk", new object[] {
                        ticket,
                        dataSetId,
                        start,
                        chunkSize}, this.LoadDataGetChunkOperationCompleted, userState);
        }
        
        private void OnLoadDataGetChunkOperationCompleted(object arg) {
            if ((this.LoadDataGetChunkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadDataGetChunkCompleted(this, new LoadDataGetChunkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Molmed.Chiasma/LoadDataCleanUp", RequestNamespace="Molmed.Chiasma", ResponseNamespace="Molmed.Chiasma", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void LoadDataCleanUp(string ticket) {
            this.Invoke("LoadDataCleanUp", new object[] {
                        ticket});
        }
        
        /// <remarks/>
        public void LoadDataCleanUpAsync(string ticket) {
            this.LoadDataCleanUpAsync(ticket, null);
        }
        
        /// <remarks/>
        public void LoadDataCleanUpAsync(string ticket, object userState) {
            if ((this.LoadDataCleanUpOperationCompleted == null)) {
                this.LoadDataCleanUpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadDataCleanUpOperationCompleted);
            }
            this.InvokeAsync("LoadDataCleanUp", new object[] {
                        ticket}, this.LoadDataCleanUpOperationCompleted, userState);
        }
        
        private void OnLoadDataCleanUpOperationCompleted(object arg) {
            if ((this.LoadDataCleanUpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadDataCleanUpCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void GetMethodsCompletedEventHandler(object sender, GetMethodsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMethodsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMethodsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void ResultPlateNameChangedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void LogGenotypeExportCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void LogSqatEventCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void OneTimeExportSqatLogsToFilesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void OneTimeExportExistingToLogFilesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void GetDataSetsCompletedEventHandler(object sender, GetDataSetsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataSetsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataSetsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void GetSubsetsCompletedEventHandler(object sender, GetSubsetsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSubsetsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSubsetsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void HasSubsetsCompletedEventHandler(object sender, HasSubsetsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HasSubsetsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HasSubsetsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void GetDataSetInfoNameCompletedEventHandler(object sender, GetDataSetInfoNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataSetInfoNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataSetInfoNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void GetSubsetInfoNameCompletedEventHandler(object sender, GetSubsetInfoNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSubsetInfoNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSubsetInfoNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void IsValidDataSetInfoCompletedEventHandler(object sender, IsValidDataSetInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsValidDataSetInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsValidDataSetInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void IsValidSubsetInfoCompletedEventHandler(object sender, IsValidSubsetInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsValidSubsetInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsValidSubsetInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void GetInternalDataSetNamesCompletedEventHandler(object sender, GetInternalDataSetNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInternalDataSetNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInternalDataSetNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void IsBulkMethodCompletedEventHandler(object sender, IsBulkMethodCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsBulkMethodCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsBulkMethodCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void LoadDataGetTicketCompletedEventHandler(object sender, LoadDataGetTicketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadDataGetTicketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadDataGetTicketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void LoadDataGetSamplesCompletedEventHandler(object sender, LoadDataGetSamplesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadDataGetSamplesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadDataGetSamplesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void LoadDataGetAssaysCompletedEventHandler(object sender, LoadDataGetAssaysCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadDataGetAssaysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadDataGetAssaysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void LoadDataExtractSetsCompletedEventHandler(object sender, LoadDataExtractSetsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadDataExtractSetsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadDataExtractSetsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void LoadDataGetTotalSizeCompletedEventHandler(object sender, LoadDataGetTotalSizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadDataGetTotalSizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadDataGetTotalSizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void LoadDataGetSetSizeCompletedEventHandler(object sender, LoadDataGetSetSizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadDataGetSetSizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadDataGetSetSizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void LoadDataGetChunkCompletedEventHandler(object sender, LoadDataGetChunkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadDataGetChunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadDataGetChunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void LoadDataCleanUpCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591